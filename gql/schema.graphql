# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
    mutation: Mutation
}

"Union Type of all registered slug content types"
union FindSlugResponse = ArticleEntityResponse | ProjectEntityResponse

union GenericMorph = Article | CommentsComment | CommentsCommentReport | ComponentHomepageWordcloud | ComponentSharedMetaSocial | EntityNotesNote | Homepage | I18NLocale | MenusMenu | MenusMenuItem | Project | Tag | UploadFile | UsersPermissionsPermission | UsersPermissionsRole | UsersPermissionsUser

type Article {
    body: String!
    createdAt: DateTime
    description: String!
    featured: Boolean
    illustration: UploadFileEntityResponse!
    publishedAt: DateTime
    slug: String
    tags(filters: TagFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): TagRelationResponseCollection
    title: String!
    updatedAt: DateTime
}

type ArticleEntity {
    attributes: Article
    id: ID
}

type ArticleEntityResponse {
    data: ArticleEntity
}

type ArticleEntityResponseCollection {
    data: [ArticleEntity!]!
    meta: ResponseCollectionMeta!
}

type ArticleRelationResponseCollection {
    data: [ArticleEntity!]!
}

type CommentsComment {
    approvalStatus: String
    authorAvatar: String
    authorEmail: String
    authorId: String
    authorName: String
    authorUser: UsersPermissionsUserEntityResponse
    blockReason: String
    blocked: Boolean
    blockedThread: Boolean
    content: String!
    createdAt: DateTime
    related: String
    removed: Boolean
    reports(filters: CommentsCommentReportFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): CommentsCommentReportRelationResponseCollection
    threadOf: CommentsCommentEntityResponse
    updatedAt: DateTime
}

type CommentsCommentEntity {
    attributes: CommentsComment
    id: ID
}

type CommentsCommentEntityResponse {
    data: CommentsCommentEntity
}

type CommentsCommentEntityResponseCollection {
    data: [CommentsCommentEntity!]!
    meta: ResponseCollectionMeta!
}

type CommentsCommentReport {
    content: String
    createdAt: DateTime
    reason: ENUM_COMMENTSCOMMENTREPORT_REASON!
    related: CommentsCommentEntityResponse
    resolved: Boolean
    updatedAt: DateTime
}

type CommentsCommentReportEntity {
    attributes: CommentsCommentReport
    id: ID
}

type CommentsCommentReportEntityResponse {
    data: CommentsCommentReportEntity
}

type CommentsCommentReportEntityResponseCollection {
    data: [CommentsCommentReportEntity!]!
    meta: ResponseCollectionMeta!
}

type CommentsCommentReportRelationResponseCollection {
    data: [CommentsCommentReportEntity!]!
}

type ComponentHomepageWordcloud {
    id: ID!
    word: String!
}

type ComponentSharedMetaSocial {
    description: String!
    id: ID!
    image: UploadFileEntityResponse
    socialNetwork: ENUM_COMPONENTSHAREDMETASOCIAL_SOCIALNETWORK!
    title: String!
}

type EntityNotesNote {
    content: String
    createdAt: DateTime
    entityId: Int
    entitySlug: String
    title: String
    updatedAt: DateTime
}

type EntityNotesNoteEntity {
    attributes: EntityNotesNote
    id: ID
}

type EntityNotesNoteEntityResponse {
    data: EntityNotesNoteEntity
}

type EntityNotesNoteEntityResponseCollection {
    data: [EntityNotesNoteEntity!]!
    meta: ResponseCollectionMeta!
}

type Homepage {
    baseline: String!
    createdAt: DateTime
    description: String
    full_name: String!
    landing: UploadFileEntityResponse!
    updatedAt: DateTime
    user: UploadFileEntityResponse!
    words(filters: ComponentHomepageWordcloudFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentHomepageWordcloud]
}

type HomepageEntity {
    attributes: Homepage
    id: ID
}

type HomepageEntityResponse {
    data: HomepageEntity
}

type I18NLocale {
    code: String
    createdAt: DateTime
    name: String
    updatedAt: DateTime
}

type I18NLocaleEntity {
    attributes: I18NLocale
    id: ID
}

type I18NLocaleEntityResponse {
    data: I18NLocaleEntity
}

type I18NLocaleEntityResponseCollection {
    data: [I18NLocaleEntity!]!
    meta: ResponseCollectionMeta!
}

type MenusMenu {
    createdAt: DateTime
    items(filters: MenusMenuItemFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): MenusMenuItemRelationResponseCollection
    slug: String!
    title: String!
    updatedAt: DateTime
}

type MenusMenuEntity {
    attributes: MenusMenu
    id: ID
}

type MenusMenuEntityResponse {
    data: MenusMenuEntity
}

type MenusMenuEntityResponseCollection {
    data: [MenusMenuEntity!]!
    meta: ResponseCollectionMeta!
}

type MenusMenuItem {
    createdAt: DateTime
    order: Int
    parent: MenusMenuItemEntityResponse
    root_menu: MenusMenuEntityResponse!
    target: ENUM_MENUSMENUITEM_TARGET
    title: String!
    updatedAt: DateTime
    url: String
}

type MenusMenuItemEntity {
    attributes: MenusMenuItem
    id: ID
}

type MenusMenuItemEntityResponse {
    data: MenusMenuItemEntity
}

type MenusMenuItemEntityResponseCollection {
    data: [MenusMenuItemEntity!]!
    meta: ResponseCollectionMeta!
}

type MenusMenuItemRelationResponseCollection {
    data: [MenusMenuItemEntity!]!
}

type Mutation {
    createArticle(data: ArticleInput!): ArticleEntityResponse
    createCommentsComment(data: CommentsCommentInput!): CommentsCommentEntityResponse
    createCommentsCommentReport(data: CommentsCommentReportInput!): CommentsCommentReportEntityResponse
    createEntityNotesNote(data: EntityNotesNoteInput!): EntityNotesNoteEntityResponse
    createMenusMenu(data: MenusMenuInput!): MenusMenuEntityResponse
    createMenusMenuItem(data: MenusMenuItemInput!): MenusMenuItemEntityResponse
    createProject(data: ProjectInput!): ProjectEntityResponse
    createTag(data: TagInput!): TagEntityResponse
    createUploadFile(data: UploadFileInput!): UploadFileEntityResponse
    "Create a new role"
    createUsersPermissionsRole(data: UsersPermissionsRoleInput!): UsersPermissionsCreateRolePayload
    "Create a new user"
    createUsersPermissionsUser(data: UsersPermissionsUserInput!): UsersPermissionsUserEntityResponse!
    deleteArticle(id: ID!): ArticleEntityResponse
    deleteCommentsComment(id: ID!): CommentsCommentEntityResponse
    deleteCommentsCommentReport(id: ID!): CommentsCommentReportEntityResponse
    deleteEntityNotesNote(id: ID!): EntityNotesNoteEntityResponse
    deleteHomepage: HomepageEntityResponse
    deleteMenusMenu(id: ID!): MenusMenuEntityResponse
    deleteMenusMenuItem(id: ID!): MenusMenuItemEntityResponse
    deleteProject(id: ID!): ProjectEntityResponse
    deleteTag(id: ID!): TagEntityResponse
    deleteUploadFile(id: ID!): UploadFileEntityResponse
    "Delete an existing role"
    deleteUsersPermissionsRole(id: ID!): UsersPermissionsDeleteRolePayload
    "Update an existing user"
    deleteUsersPermissionsUser(id: ID!): UsersPermissionsUserEntityResponse!
    "Confirm an email users email address"
    emailConfirmation(confirmation: String!): UsersPermissionsLoginPayload
    "Request a reset password token"
    forgotPassword(email: String!): UsersPermissionsPasswordPayload
    login(input: UsersPermissionsLoginInput!): UsersPermissionsLoginPayload!
    multipleUpload(field: String, files: [Upload]!, ref: String, refId: ID): [UploadFileEntityResponse]!
    "Register a user"
    register(input: UsersPermissionsRegisterInput!): UsersPermissionsLoginPayload!
    removeFile(id: ID!): UploadFileEntityResponse
    "Reset user password. Confirm with a code (resetToken from forgotPassword)"
    resetPassword(code: String!, password: String!, passwordConfirmation: String!): UsersPermissionsLoginPayload
    updateArticle(data: ArticleInput!, id: ID!): ArticleEntityResponse
    updateCommentsComment(data: CommentsCommentInput!, id: ID!): CommentsCommentEntityResponse
    updateCommentsCommentReport(data: CommentsCommentReportInput!, id: ID!): CommentsCommentReportEntityResponse
    updateEntityNotesNote(data: EntityNotesNoteInput!, id: ID!): EntityNotesNoteEntityResponse
    updateFileInfo(id: ID!, info: FileInfoInput): UploadFileEntityResponse!
    updateHomepage(data: HomepageInput!): HomepageEntityResponse
    updateMenusMenu(data: MenusMenuInput!, id: ID!): MenusMenuEntityResponse
    updateMenusMenuItem(data: MenusMenuItemInput!, id: ID!): MenusMenuItemEntityResponse
    updateProject(data: ProjectInput!, id: ID!): ProjectEntityResponse
    updateTag(data: TagInput!, id: ID!): TagEntityResponse
    updateUploadFile(data: UploadFileInput!, id: ID!): UploadFileEntityResponse
    "Update an existing role"
    updateUsersPermissionsRole(data: UsersPermissionsRoleInput!, id: ID!): UsersPermissionsUpdateRolePayload
    "Update an existing user"
    updateUsersPermissionsUser(data: UsersPermissionsUserInput!, id: ID!): UsersPermissionsUserEntityResponse!
    upload(field: String, file: Upload!, info: FileInfoInput, ref: String, refId: ID): UploadFileEntityResponse!
}

type Pagination {
    page: Int!
    pageCount: Int!
    pageSize: Int!
    total: Int!
}

type Project {
    body: String!
    createdAt: DateTime
    date: Date!
    featured: Boolean
    illustration: UploadFileEntityResponse
    publishedAt: DateTime
    repo_link: String
    screenshots(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileRelationResponseCollection!
    slug: String
    tags(filters: TagFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): TagRelationResponseCollection
    title: String!
    updatedAt: DateTime
    website: String
}

type ProjectEntity {
    attributes: Project
    id: ID
}

type ProjectEntityResponse {
    data: ProjectEntity
}

type ProjectEntityResponseCollection {
    data: [ProjectEntity!]!
    meta: ResponseCollectionMeta!
}

type ProjectRelationResponseCollection {
    data: [ProjectEntity!]!
}

type Query {
    article(id: ID): ArticleEntityResponse
    articles(filters: ArticleFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): ArticleEntityResponseCollection
    commentsComment(id: ID): CommentsCommentEntityResponse
    commentsCommentReport(id: ID): CommentsCommentReportEntityResponse
    commentsCommentReports(filters: CommentsCommentReportFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): CommentsCommentReportEntityResponseCollection
    commentsComments(filters: CommentsCommentFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): CommentsCommentEntityResponseCollection
    entityNotesNote(id: ID): EntityNotesNoteEntityResponse
    entityNotesNotes(filters: EntityNotesNoteFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): EntityNotesNoteEntityResponseCollection
    findSlug(modelName: String, publicationState: String, slug: String): FindSlugResponse
    homepage: HomepageEntityResponse
    i18NLocale(id: ID): I18NLocaleEntityResponse
    i18NLocales(filters: I18NLocaleFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): I18NLocaleEntityResponseCollection
    me: UsersPermissionsMe
    menusMenu(id: ID): MenusMenuEntityResponse
    menusMenuItem(id: ID): MenusMenuItemEntityResponse
    menusMenuItems(filters: MenusMenuItemFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): MenusMenuItemEntityResponseCollection
    menusMenus(filters: MenusMenuFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): MenusMenuEntityResponseCollection
    project(id: ID): ProjectEntityResponse
    projects(filters: ProjectFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): ProjectEntityResponseCollection
    tag(id: ID): TagEntityResponse
    tags(filters: TagFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): TagEntityResponseCollection
    uploadFile(id: ID): UploadFileEntityResponse
    uploadFiles(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileEntityResponseCollection
    usersPermissionsRole(id: ID): UsersPermissionsRoleEntityResponse
    usersPermissionsRoles(filters: UsersPermissionsRoleFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsRoleEntityResponseCollection
    usersPermissionsUser(id: ID): UsersPermissionsUserEntityResponse
    usersPermissionsUsers(filters: UsersPermissionsUserFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsUserEntityResponseCollection
}

type ResponseCollectionMeta {
    pagination: Pagination!
}

type Tag {
    articles(filters: ArticleFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): ArticleRelationResponseCollection
    createdAt: DateTime
    description: String
    projects(filters: ProjectFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): ProjectRelationResponseCollection
    title: String!
    updatedAt: DateTime
}

type TagEntity {
    attributes: Tag
    id: ID
}

type TagEntityResponse {
    data: TagEntity
}

type TagEntityResponseCollection {
    data: [TagEntity!]!
    meta: ResponseCollectionMeta!
}

type TagRelationResponseCollection {
    data: [TagEntity!]!
}

type UploadFile {
    alternativeText: String
    caption: String
    createdAt: DateTime
    ext: String
    formats: JSON
    hash: String!
    height: Int
    mime: String!
    name: String!
    previewUrl: String
    provider: String!
    provider_metadata: JSON
    related: [GenericMorph]
    size: Float!
    updatedAt: DateTime
    url: String!
    width: Int
}

type UploadFileEntity {
    attributes: UploadFile
    id: ID
}

type UploadFileEntityResponse {
    data: UploadFileEntity
}

type UploadFileEntityResponseCollection {
    data: [UploadFileEntity!]!
    meta: ResponseCollectionMeta!
}

type UploadFileRelationResponseCollection {
    data: [UploadFileEntity!]!
}

type UsersPermissionsCreateRolePayload {
    ok: Boolean!
}

type UsersPermissionsDeleteRolePayload {
    ok: Boolean!
}

type UsersPermissionsLoginPayload {
    jwt: String
    user: UsersPermissionsMe!
}

type UsersPermissionsMe {
    blocked: Boolean
    confirmed: Boolean
    email: String
    id: ID!
    role: UsersPermissionsMeRole
    username: String!
}

type UsersPermissionsMeRole {
    description: String
    id: ID!
    name: String!
    type: String
}

type UsersPermissionsPasswordPayload {
    ok: Boolean!
}

type UsersPermissionsPermission {
    action: String!
    createdAt: DateTime
    role: UsersPermissionsRoleEntityResponse
    updatedAt: DateTime
}

type UsersPermissionsPermissionEntity {
    attributes: UsersPermissionsPermission
    id: ID
}

type UsersPermissionsPermissionRelationResponseCollection {
    data: [UsersPermissionsPermissionEntity!]!
}

type UsersPermissionsRole {
    createdAt: DateTime
    description: String
    name: String!
    permissions(filters: UsersPermissionsPermissionFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsPermissionRelationResponseCollection
    type: String
    updatedAt: DateTime
    users(filters: UsersPermissionsUserFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsUserRelationResponseCollection
}

type UsersPermissionsRoleEntity {
    attributes: UsersPermissionsRole
    id: ID
}

type UsersPermissionsRoleEntityResponse {
    data: UsersPermissionsRoleEntity
}

type UsersPermissionsRoleEntityResponseCollection {
    data: [UsersPermissionsRoleEntity!]!
    meta: ResponseCollectionMeta!
}

type UsersPermissionsUpdateRolePayload {
    ok: Boolean!
}

type UsersPermissionsUser {
    blocked: Boolean
    confirmed: Boolean
    createdAt: DateTime
    email: String!
    provider: String
    role: UsersPermissionsRoleEntityResponse
    updatedAt: DateTime
    username: String!
}

type UsersPermissionsUserEntity {
    attributes: UsersPermissionsUser
    id: ID
}

type UsersPermissionsUserEntityResponse {
    data: UsersPermissionsUserEntity
}

type UsersPermissionsUserEntityResponseCollection {
    data: [UsersPermissionsUserEntity!]!
    meta: ResponseCollectionMeta!
}

type UsersPermissionsUserRelationResponseCollection {
    data: [UsersPermissionsUserEntity!]!
}

enum ENUM_COMMENTSCOMMENTREPORT_REASON {
    BAD_LANGUAGE
    DISCRIMINATION
    OTHER
}

enum ENUM_COMPONENTSHAREDMETASOCIAL_SOCIALNETWORK {
    Facebook
    Twitter
}

enum ENUM_MENUSMENUITEM_TARGET {
    blank
    parent
    self
    top
}

enum PublicationState {
    LIVE
    PREVIEW
}

"A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar."
scalar Date

"A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar."
scalar DateTime

"The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf)."
scalar JSON

"The `Upload` scalar type represents a file upload."
scalar Upload

input ArticleFiltersInput {
    and: [ArticleFiltersInput]
    body: StringFilterInput
    createdAt: DateTimeFilterInput
    description: StringFilterInput
    featured: BooleanFilterInput
    id: IDFilterInput
    not: ArticleFiltersInput
    or: [ArticleFiltersInput]
    publishedAt: DateTimeFilterInput
    sitemap_exclude: BooleanFilterInput
    slug: StringFilterInput
    tags: TagFiltersInput
    title: StringFilterInput
    updatedAt: DateTimeFilterInput
}

input ArticleInput {
    body: String
    description: String
    featured: Boolean
    illustration: ID
    publishedAt: DateTime
    sitemap_exclude: Boolean
    slug: String
    tags: [ID]
    title: String
}

input BooleanFilterInput {
    and: [Boolean]
    between: [Boolean]
    contains: Boolean
    containsi: Boolean
    endsWith: Boolean
    eq: Boolean
    gt: Boolean
    gte: Boolean
    in: [Boolean]
    lt: Boolean
    lte: Boolean
    ne: Boolean
    not: BooleanFilterInput
    notContains: Boolean
    notContainsi: Boolean
    notIn: [Boolean]
    notNull: Boolean
    null: Boolean
    or: [Boolean]
    startsWith: Boolean
}

input CommentsCommentFiltersInput {
    and: [CommentsCommentFiltersInput]
    approvalStatus: StringFilterInput
    authorAvatar: StringFilterInput
    authorEmail: StringFilterInput
    authorId: StringFilterInput
    authorName: StringFilterInput
    authorUser: UsersPermissionsUserFiltersInput
    blockReason: StringFilterInput
    blocked: BooleanFilterInput
    blockedThread: BooleanFilterInput
    content: StringFilterInput
    createdAt: DateTimeFilterInput
    id: IDFilterInput
    not: CommentsCommentFiltersInput
    or: [CommentsCommentFiltersInput]
    related: StringFilterInput
    removed: BooleanFilterInput
    reports: CommentsCommentReportFiltersInput
    sitemap_exclude: BooleanFilterInput
    threadOf: CommentsCommentFiltersInput
    updatedAt: DateTimeFilterInput
}

input CommentsCommentInput {
    approvalStatus: String
    authorAvatar: String
    authorEmail: String
    authorId: String
    authorName: String
    authorUser: ID
    blockReason: String
    blocked: Boolean
    blockedThread: Boolean
    content: String
    related: String
    removed: Boolean
    reports: [ID]
    sitemap_exclude: Boolean
    threadOf: ID
}

input CommentsCommentReportFiltersInput {
    and: [CommentsCommentReportFiltersInput]
    content: StringFilterInput
    createdAt: DateTimeFilterInput
    id: IDFilterInput
    not: CommentsCommentReportFiltersInput
    or: [CommentsCommentReportFiltersInput]
    reason: StringFilterInput
    related: CommentsCommentFiltersInput
    resolved: BooleanFilterInput
    sitemap_exclude: BooleanFilterInput
    updatedAt: DateTimeFilterInput
}

input CommentsCommentReportInput {
    content: String
    reason: ENUM_COMMENTSCOMMENTREPORT_REASON
    related: ID
    resolved: Boolean
    sitemap_exclude: Boolean
}

input ComponentHomepageWordcloudFiltersInput {
    and: [ComponentHomepageWordcloudFiltersInput]
    not: ComponentHomepageWordcloudFiltersInput
    or: [ComponentHomepageWordcloudFiltersInput]
    word: StringFilterInput
}

input ComponentHomepageWordcloudInput {
    id: ID
    word: String
}

input DateFilterInput {
    and: [Date]
    between: [Date]
    contains: Date
    containsi: Date
    endsWith: Date
    eq: Date
    gt: Date
    gte: Date
    in: [Date]
    lt: Date
    lte: Date
    ne: Date
    not: DateFilterInput
    notContains: Date
    notContainsi: Date
    notIn: [Date]
    notNull: Boolean
    null: Boolean
    or: [Date]
    startsWith: Date
}

input DateTimeFilterInput {
    and: [DateTime]
    between: [DateTime]
    contains: DateTime
    containsi: DateTime
    endsWith: DateTime
    eq: DateTime
    gt: DateTime
    gte: DateTime
    in: [DateTime]
    lt: DateTime
    lte: DateTime
    ne: DateTime
    not: DateTimeFilterInput
    notContains: DateTime
    notContainsi: DateTime
    notIn: [DateTime]
    notNull: Boolean
    null: Boolean
    or: [DateTime]
    startsWith: DateTime
}

input EntityNotesNoteFiltersInput {
    and: [EntityNotesNoteFiltersInput]
    content: StringFilterInput
    createdAt: DateTimeFilterInput
    entityId: IntFilterInput
    entitySlug: StringFilterInput
    id: IDFilterInput
    not: EntityNotesNoteFiltersInput
    or: [EntityNotesNoteFiltersInput]
    sitemap_exclude: BooleanFilterInput
    title: StringFilterInput
    updatedAt: DateTimeFilterInput
}

input EntityNotesNoteInput {
    content: String
    entityId: Int
    entitySlug: String
    sitemap_exclude: Boolean
    title: String
}

input FileInfoInput {
    alternativeText: String
    caption: String
    name: String
}

input FloatFilterInput {
    and: [Float]
    between: [Float]
    contains: Float
    containsi: Float
    endsWith: Float
    eq: Float
    gt: Float
    gte: Float
    in: [Float]
    lt: Float
    lte: Float
    ne: Float
    not: FloatFilterInput
    notContains: Float
    notContainsi: Float
    notIn: [Float]
    notNull: Boolean
    null: Boolean
    or: [Float]
    startsWith: Float
}

input HomepageInput {
    baseline: String
    description: String
    full_name: String
    landing: ID
    sitemap_exclude: Boolean
    user: ID
    words: [ComponentHomepageWordcloudInput]
}

input I18NLocaleFiltersInput {
    and: [I18NLocaleFiltersInput]
    code: StringFilterInput
    createdAt: DateTimeFilterInput
    id: IDFilterInput
    name: StringFilterInput
    not: I18NLocaleFiltersInput
    or: [I18NLocaleFiltersInput]
    updatedAt: DateTimeFilterInput
}

input IDFilterInput {
    and: [ID]
    between: [ID]
    contains: ID
    containsi: ID
    endsWith: ID
    eq: ID
    gt: ID
    gte: ID
    in: [ID]
    lt: ID
    lte: ID
    ne: ID
    not: IDFilterInput
    notContains: ID
    notContainsi: ID
    notIn: [ID]
    notNull: Boolean
    null: Boolean
    or: [ID]
    startsWith: ID
}

input IntFilterInput {
    and: [Int]
    between: [Int]
    contains: Int
    containsi: Int
    endsWith: Int
    eq: Int
    gt: Int
    gte: Int
    in: [Int]
    lt: Int
    lte: Int
    ne: Int
    not: IntFilterInput
    notContains: Int
    notContainsi: Int
    notIn: [Int]
    notNull: Boolean
    null: Boolean
    or: [Int]
    startsWith: Int
}

input JSONFilterInput {
    and: [JSON]
    between: [JSON]
    contains: JSON
    containsi: JSON
    endsWith: JSON
    eq: JSON
    gt: JSON
    gte: JSON
    in: [JSON]
    lt: JSON
    lte: JSON
    ne: JSON
    not: JSONFilterInput
    notContains: JSON
    notContainsi: JSON
    notIn: [JSON]
    notNull: Boolean
    null: Boolean
    or: [JSON]
    startsWith: JSON
}

input MenusMenuFiltersInput {
    and: [MenusMenuFiltersInput]
    createdAt: DateTimeFilterInput
    id: IDFilterInput
    items: MenusMenuItemFiltersInput
    not: MenusMenuFiltersInput
    or: [MenusMenuFiltersInput]
    sitemap_exclude: BooleanFilterInput
    slug: StringFilterInput
    title: StringFilterInput
    updatedAt: DateTimeFilterInput
}

input MenusMenuInput {
    items: [ID]
    sitemap_exclude: Boolean
    slug: String
    title: String
}

input MenusMenuItemFiltersInput {
    and: [MenusMenuItemFiltersInput]
    createdAt: DateTimeFilterInput
    id: IDFilterInput
    not: MenusMenuItemFiltersInput
    or: [MenusMenuItemFiltersInput]
    order: IntFilterInput
    parent: MenusMenuItemFiltersInput
    root_menu: MenusMenuFiltersInput
    sitemap_exclude: BooleanFilterInput
    target: StringFilterInput
    title: StringFilterInput
    updatedAt: DateTimeFilterInput
    url: StringFilterInput
}

input MenusMenuItemInput {
    order: Int
    parent: ID
    root_menu: ID
    sitemap_exclude: Boolean
    target: ENUM_MENUSMENUITEM_TARGET
    title: String
    url: String
}

input PaginationArg {
    limit: Int
    page: Int
    pageSize: Int
    start: Int
}

input ProjectFiltersInput {
    and: [ProjectFiltersInput]
    body: StringFilterInput
    createdAt: DateTimeFilterInput
    date: DateFilterInput
    featured: BooleanFilterInput
    id: IDFilterInput
    not: ProjectFiltersInput
    or: [ProjectFiltersInput]
    publishedAt: DateTimeFilterInput
    repo_link: StringFilterInput
    sitemap_exclude: BooleanFilterInput
    slug: StringFilterInput
    tags: TagFiltersInput
    title: StringFilterInput
    updatedAt: DateTimeFilterInput
    website: StringFilterInput
}

input ProjectInput {
    body: String
    date: Date
    featured: Boolean
    illustration: ID
    publishedAt: DateTime
    repo_link: String
    screenshots: [ID]
    sitemap_exclude: Boolean
    slug: String
    tags: [ID]
    title: String
    website: String
}

input StringFilterInput {
    and: [String]
    between: [String]
    contains: String
    containsi: String
    endsWith: String
    eq: String
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    not: StringFilterInput
    notContains: String
    notContainsi: String
    notIn: [String]
    notNull: Boolean
    null: Boolean
    or: [String]
    startsWith: String
}

input TagFiltersInput {
    and: [TagFiltersInput]
    articles: ArticleFiltersInput
    createdAt: DateTimeFilterInput
    description: StringFilterInput
    id: IDFilterInput
    not: TagFiltersInput
    or: [TagFiltersInput]
    projects: ProjectFiltersInput
    sitemap_exclude: BooleanFilterInput
    title: StringFilterInput
    updatedAt: DateTimeFilterInput
}

input TagInput {
    articles: [ID]
    description: String
    projects: [ID]
    sitemap_exclude: Boolean
    title: String
}

input UploadFileFiltersInput {
    alternativeText: StringFilterInput
    and: [UploadFileFiltersInput]
    caption: StringFilterInput
    createdAt: DateTimeFilterInput
    ext: StringFilterInput
    formats: JSONFilterInput
    hash: StringFilterInput
    height: IntFilterInput
    id: IDFilterInput
    mime: StringFilterInput
    name: StringFilterInput
    not: UploadFileFiltersInput
    or: [UploadFileFiltersInput]
    previewUrl: StringFilterInput
    provider: StringFilterInput
    provider_metadata: JSONFilterInput
    sitemap_exclude: BooleanFilterInput
    size: FloatFilterInput
    updatedAt: DateTimeFilterInput
    url: StringFilterInput
    width: IntFilterInput
}

input UploadFileInput {
    alternativeText: String
    caption: String
    ext: String
    formats: JSON
    hash: String
    height: Int
    mime: String
    name: String
    previewUrl: String
    provider: String
    provider_metadata: JSON
    sitemap_exclude: Boolean
    size: Float
    url: String
    width: Int
}

input UsersPermissionsLoginInput {
    identifier: String!
    password: String!
    provider: String! = "local"
}

input UsersPermissionsPermissionFiltersInput {
    action: StringFilterInput
    and: [UsersPermissionsPermissionFiltersInput]
    createdAt: DateTimeFilterInput
    id: IDFilterInput
    not: UsersPermissionsPermissionFiltersInput
    or: [UsersPermissionsPermissionFiltersInput]
    role: UsersPermissionsRoleFiltersInput
    updatedAt: DateTimeFilterInput
}

input UsersPermissionsRegisterInput {
    email: String!
    password: String!
    username: String!
}

input UsersPermissionsRoleFiltersInput {
    and: [UsersPermissionsRoleFiltersInput]
    createdAt: DateTimeFilterInput
    description: StringFilterInput
    id: IDFilterInput
    name: StringFilterInput
    not: UsersPermissionsRoleFiltersInput
    or: [UsersPermissionsRoleFiltersInput]
    permissions: UsersPermissionsPermissionFiltersInput
    type: StringFilterInput
    updatedAt: DateTimeFilterInput
    users: UsersPermissionsUserFiltersInput
}

input UsersPermissionsRoleInput {
    description: String
    name: String
    permissions: [ID]
    type: String
    users: [ID]
}

input UsersPermissionsUserFiltersInput {
    and: [UsersPermissionsUserFiltersInput]
    blocked: BooleanFilterInput
    confirmationToken: StringFilterInput
    confirmed: BooleanFilterInput
    createdAt: DateTimeFilterInput
    email: StringFilterInput
    id: IDFilterInput
    not: UsersPermissionsUserFiltersInput
    or: [UsersPermissionsUserFiltersInput]
    password: StringFilterInput
    provider: StringFilterInput
    resetPasswordToken: StringFilterInput
    role: UsersPermissionsRoleFiltersInput
    sitemap_exclude: BooleanFilterInput
    updatedAt: DateTimeFilterInput
    username: StringFilterInput
}

input UsersPermissionsUserInput {
    blocked: Boolean
    confirmationToken: String
    confirmed: Boolean
    email: String
    password: String
    provider: String
    resetPasswordToken: String
    role: ID
    sitemap_exclude: Boolean
    username: String
}
